#!/usr/bin/python

import sys
sys.path.append("/usr/local/AsteriskPyHou/lib")

from database import Sqlite3Database
from ami import AMI
from functions import sms
from database import Sqlite3Database
import argparse

DB = Sqlite3Database("/usr/local/AsteriskPyHou/etc/users.db")
GAME_RESULTS=None

def game1():
    main_line = '8322611494'
    users = DB.dquery("users", fetchall=True)

    ami = AMI()
    for user in users:
        ami.create_call(user['phonenumber'], main_line, main_line, 'game-one', user['phonenumber'])


def game2():
    number = "8322611494"
    users = DB.dquery("users", fetchall=True)

    for user in users:
        code = open("/etc/secret_code", 'r').read().strip()
        msg = "Hurry! Call {0} and enter {1} when prompted".format(number, code)
        print user['phonenumber'], ": ", msg
        sms(user['phonenumber'], msg)


def game3():
    main_line = '2818097414'
    users = DB.dquery("users", fetchall=True)

    ami = AMI()
    for user in users:
        ami.create_call(user['phonenumber'], main_line,
                        main_line, 'game-three', user['phonenumber'])


games = {1:game1,
         2:game2,
         3:game3,
}

def get_results(game, order_by):
    global GAME_RESULTS
    if not GAME_RESULTS:
        GAME_RESULTS = DB.dquery("entry", where="game={0}".format(game), fetchall=True, order_by=order_by)
    return GAME_RESULTS


def notify(i, what):
    print "Notifying {0}: {1} -> {2}".format(i['phonenumber'], i['game'], i['result'])
    sms(i['phonenumber'], what)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-g", "--game", type=int, help="-g <game number>", choices=[1,2,3])
    parser.add_argument("-p", "--play", action="store_true", help="Play the game, don't report on it")
    parser.add_argument("-r", "--results", action="store_true", help="Show results of the game")
    parser.add_argument("-c", "--condition", type=str, help="Set condition for winning", choices=["first", "last", "equality", 'fastest', 'slowest'], default='first')
    parser.add_argument("-v", "--value", type=str, help="Condition to set for equality")
    parser.add_argument("-n", "--notify-winner", action="store_true", help="Notify the winner")
    parser.add_argument("-l", "--list-players", action="store_true", help="List all registered players")
    args = parser.parse_args()

    if not args.game and not args.list_players:
        parser.print_usage()
        sys.exit(1)

    if args.list_players:
        for i in DB.dquery("users", ["name", "phonenumber", "extension"], fetchall=True, order_by="name"):
            print "Name: {0}, Phone: {1}, Ext: {2}".format(i['name'], i['phonenumber'], i['extension'])
        sys.exit(0)

    if args.game and args.play:
        print "Launching game {0}".format(args.game)
        games[args.game]()
        sys.exit(0)

    if args.condition == 'first' or args.condition == 'fastest':
        order_by = "result ASC"
    elif args.condition == 'last' or args.condition == 'slowest':
        order_by = "result DESC"
    else:
        order_by = None

    if args.results:
        game_results = get_results(args.game, order_by)
        for i in game_results:
            print "{0}: {1} -> {2}".format(i['phonenumber'], i['game'], i['result'])

    if args.notify_winner:
        game_results = get_results(args.game, order_by)
        for i in game_results:
            if args.condition == 'equality':
                if i['result'].lower().strip() == args.value.lower().strip():
                    notify(i, "You got it. The right answer was {0}".format(args.value))
                    break
            else:
                notify(i, "Beer time. You were the {0} to complete the objective".format(args.condition))
                break






