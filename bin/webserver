#!/usr/bin/python
__author__ = 'jfindley'
"""Secure WSGI server example based on gevent.pywsgi"""

import os
import sys
import json
import urllib

sys.path.append("/usr/local/AsteriskPyHou/lib")

from gevent import pywsgi
from phonenumbers import parse, is_valid_number
from database import Sqlite3Database
from functions import sms
from syslog import syslog as log, LOG_INFO



#Cleanup SIP entries
with open("/usr/local/AsteriskPyHou/etc/asterisk/default_sip.conf", 'r') as f:
    default = f.read()
    f.close()
    with open("/etc/asterisk/sip.conf", 'w') as k:
        k.write(default)
        k.close()
os.system('/usr/sbin/asterisk -rx "sip reload"')


#Cleanup DB
if os.path.exists("/usr/local/AsteriskPyHou/etc/users.db"):
    os.remove("/usr/local/AsteriskPyHou/etc/users.db")

DB = Sqlite3Database("/usr/local/AsteriskPyHou/etc/users.db")


def numberOK(number):
    if is_valid_number(parse(number, 'US')):
        return True
    return False


def generatePeer(parms):
    template = """

[{0}]
type=peer
host=dynamic
secret={1}
disallow=all
allow=ulaw
nat=no
canreinvite=no
qualify=no
context=default
dtmfmode=rfc2833
insecure=invite,port
sendrpid=yes
callerid={0}


"""
    return template.format(parms['extension'], parms['secret'])


def writePeer(peer):
    with open("/etc/asterisk/sip.conf", 'a') as f:
        f.write(peer)
        f.close()


def getParms(env):
    return dict([x.split("=") for x in env['QUERY_STRING'].split("&")])


def handler(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    for key, value in env.iteritems():
        log(LOG_INFO, "server: {0}: {1}".format(key, value))

    if env['PATH_INFO'] == '/':
        return urllib.urlopen("http://127.0.0.1:8080")

    elif env['PATH_INFO'] == '/getusers':
        return [json.dumps(DB.dquery("users", ['username', 'phonenumber', 'extension'], fetchall=True))]

    elif env['PATH_INFO'] == '/register':
        parms = getParms(env)

        if not ('username' in parms and 'phonenumber' in parms):
            return ["Invalid parameters in request: Need name and valid number"]

        if not numberOK(parms['phonenumber']):
            return ["Invalid number in request"]

        parms['extension'] = parms['phonenumber'][-4:]
        parms['secret'] = parms['phonenumber']

        try:
            DB.insert("users", parms)
            writePeer(
                generatePeer(
                    parms
                )
            )
            os.system('/usr/sbin/asterisk -rx "sip reload"')
        except Exception, e:
            return ["User already exists!"]

        msg = "You're good.\n"
        msg += "un: {0}\n".format(parms['extension'])
        msg += "pw: {0}\n".format(parms['secret'])
        msg += "gw: 54.186.252.119"
        sms(parms['phonenumber'], msg)
        return ["OK"]

    elif env['PATH_INFO'] == '/deregister':
        parms = getParms(env)
        if not 'phonenumber' in parms:
            return ["Invalid parameters in request: Need valid number"]

        if not numberOK(parms['phonenumber']):
            return ["Invalid number in request"]

        DB.delete("users", where="phonenumber='{0}'".format(parms['phonenumber']))
        return ["OK"]

    elif env['PATH_INFO'] == '/reset':
        DB.update("users", "winner", "False")
        return ['OK']

    elif env['PATH_INFO'] == '/speech_to_text':
        if env['REQUEST_METHOD'] == 'POST':
            qstr = env['wsgi.input'].read()
            env['QUERY_STRING'] = qstr

        parms = getParms(env)

        entry = {'game':3, 'phonenumber':parms['reference'], 'result':parms['transcription'].lower()}
        sms("8325893444", "TSR: {0}".format(entry['result']))
        try:
            DB.insert("entry", entry)
        except Exception, e:
            log(LOG_INFO, "game2.agi: {0}'s entry was omitted because: {1}".format(parms['reference'], e))

        return ['OK']

    else:
        return "NOT FOUND"

if __name__ == "__main__":
    server = pywsgi.WSGIServer(('0.0.0.0', 80), handler)
    # to start the server asynchronously, call server.start()
    # we use blocking serve_forever() here because we have no other jobs
    server.serve_forever()
